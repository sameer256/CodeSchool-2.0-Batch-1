-- User Roles.
CREATE TABLE
    "roles" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "auth_role" VARCHAR(20)
    );


-- Insert Roles.
INSERT INTO roles("auth_role") VALUES ('admin'), ('user');


-- Users Master Table with details.
CREATE TABLE
    "users_master" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "name" VARCHAR(100),
        "email" VARCHAR(50) UNIQUE NOT NULL,
        "phone" BIGINT UNIQUE NOT NULL,
        "password" VARCHAR(255),
        "role_id" SMALLINT NOT NULL REFERENCES roles(id),
        "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );


-- Categories List.
CREATE TABLE
    "categories" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "category" VARCHAR(30)
    );


-- Insert Categories.
INSERT INTO
    categories("category")
VALUES ('Mobile'), ('Tablet'), ('Laptop');


-- Product Details.
CREATE TABLE
    "products" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "product_image" VARCHAR(200),
        "name" VARCHAR(100),
        "price" INTEGER,
        "discount" INTEGER,
        "category_id" SMALLINT NOT NULL REFERENCES categories(id)
    );


-- User Cart.
CREATE TABLE
    "carts" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "user_id" SMALLINT NOT NULL REFERENCES users_master(id),
        "product_id" SMALLINT NOT NULL REFERENCES products(id),
        "quantity" INTEGER
    );


-- Orders List.
CREATE TABLE
    "orders" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "user_id" SMALLINT NOT NULL REFERENCES users_master(id),
        "price" INTEGER,
        "discount" INTEGER,
        "final_amount" INTEGER,
        "order_date" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );


-- Order Details.
CREATE TABLE
    "order_details" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "order_id" SMALLINT NOT NULL REFERENCES orders(id),
        "product_id" SMALLINT NOT NULL REFERENCES products(id),
        "quantity" INTEGER
    );


-- Sessions.
CREATE TABLE
    "sessions" (
        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        "user_id" SMALLINT NOT NULL REFERENCES users_master(id),
        "token" VARCHAR,
        "token_expiry" TIMESTAMP
    );


-- TESTING.
SELECT * FROM sessions;

-- Query1.
SELECT id,
product_image,name,price,discount,category_id
FROM products
WHERE category_id = 3 AND name ILIKE '%mac%';

-- Query2.
INSERT INTO sessions(user_id, token, token_expiry) 
VALUES
(NOW() + INTERVAL '23 hours 59 minutes 59 seconds');


-- Get the list of user cart.
SELECT user_id,
product_id,
product_image,
name,
price,
discount,
quantity
FROM carts
INNER JOIN products
ON products.id = carts.product_id
WHERE user_id = 3;


-- Get the user each order product details.
SELECT ord.id AS order_id,
prod.product_image AS product_image,
prod.name AS product_name,
prod.price AS product_price,
prod.discount AS product_discount,
ord_det.quantity AS product_quantity
FROM users_master as usr 
INNER JOIN orders as ord 
ON usr.id = ord.user_id
INNER JOIN order_details as ord_det 
ON ord_det.order_id = ord.id
INNER JOIN products as prod
ON prod.id = ord_det.product_id
WHERE usr.id = 3 and ord.id = 36;


-- Get the user list of orders.
SELECT ord.order_date AS order_date,
ord.final_amount AS total_price,
ord.id AS order_id,
usr.name AS user_name
FROM users_master as usr 
INNER JOIN orders as ord 
ON usr.id = ord.user_id
WHERE usr.id = 3;